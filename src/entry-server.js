import { createApp } from './main'
import { renderToString } from '@vue/server-renderer'

export async function render(url, manifest) {
  const { app, router } = createApp()

  // set the router to the desired URL before rendering
  // 在渲染之前将路由器设置为所需的URL
  router.push(url)
  await router.isReady()

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.

  // 通过useSSRContext() @vitejs/plugin-vue传递SSR上下文对象，
  // 将代码注入到组件的setup()中，该组件在ctx.modules上注册自己。
  // 渲染后，ctx.modules 将包含在这个渲染调用期间被实例化的所有组件。



  // ssr-manifest.json 说明
  // 客户端构建生成 dist/client/ssr-manifest.json
  // 生成命令 ： "build:client": "vite build --outDir dist/client --ssrManifest"
  // ssr-manifest.json 包含模块 ID 和它们关联的 chunk 和资源文件的映射
  
  // 我们想要将模块 ID 映射到客户端文件上
  // 下面代码会收集在服务器渲染调用期间使用到的组件模块 ID
  // 并会自动注册使用的组件模块 ID 到相关的 Vue SSR 上下文：
  const ctx = {}
  const html = await renderToString(app, ctx)

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.

  // 由Vite生成的SSR清单（manifest）包含 module -> chunk/asset mapping ，
  // 然后我们可以使用它来确定这个请求需要预加载哪些文件

  // 通过 manifest 文件生成静态资源的link
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest)
  return [html, preloadLinks]
}

function renderPreloadLinks(modules, manifest) {
  let links = ''
  const seen = new Set()
  modules.forEach((id) => {
    const files = manifest[id]
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file)
          links += renderPreloadLink(file)
        }
      })
    }
  })
  return links
}

function renderPreloadLink(file) {
  if (file.endsWith('.js')) {
    return `<link rel="modulepreload" crossorigin href="${file}">`
  } else if (file.endsWith('.css')) {
    return `<link rel="stylesheet" href="${file}">`
  } else if (file.endsWith('.woff')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`
  } else if (file.endsWith('.woff2')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`
  } else if (file.endsWith('.gif')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/gif" crossorigin>`
  } else if (file.endsWith('.jpg')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg" crossorigin>`
  } else if (file.endsWith('.jpeg')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg" crossorigin>`
  } else if (file.endsWith('.png')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/png" crossorigin>`
  } else {
    // TODO
    return ''
  }
}
